// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: ggr.proto

package ggr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Ggr_GarantexGetRates_FullMethodName = "/ggr/GarantexGetRates"
)

// GgrClient is the client API for Ggr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GgrClient interface {
	GarantexGetRates(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type ggrClient struct {
	cc grpc.ClientConnInterface
}

func NewGgrClient(cc grpc.ClientConnInterface) GgrClient {
	return &ggrClient{cc}
}

func (c *ggrClient) GarantexGetRates(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Ggr_GarantexGetRates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GgrServer is the server API for Ggr service.
// All implementations must embed UnimplementedGgrServer
// for forward compatibility
type GgrServer interface {
	GarantexGetRates(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedGgrServer()
}

// UnimplementedGgrServer must be embedded to have forward compatible implementations.
type UnimplementedGgrServer struct {
}

func (UnimplementedGgrServer) GarantexGetRates(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GarantexGetRates not implemented")
}
func (UnimplementedGgrServer) mustEmbedUnimplementedGgrServer() {}

// UnsafeGgrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GgrServer will
// result in compilation errors.
type UnsafeGgrServer interface {
	mustEmbedUnimplementedGgrServer()
}

func RegisterGgrServer(s grpc.ServiceRegistrar, srv GgrServer) {
	s.RegisterService(&Ggr_ServiceDesc, srv)
}

func _Ggr_GarantexGetRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GgrServer).GarantexGetRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ggr_GarantexGetRates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GgrServer).GarantexGetRates(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Ggr_ServiceDesc is the grpc.ServiceDesc for Ggr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ggr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ggr",
	HandlerType: (*GgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GarantexGetRates",
			Handler:    _Ggr_GarantexGetRates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ggr.proto",
}
